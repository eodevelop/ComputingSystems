// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        //zx
        Out16(in=zx, out=outzx);
        Not16(in=outzx, out=notzx);
        And16(a=x, b=notzx, out=zxx);
        
        //zy
        Out16(in=zy, out=outzy);
        Not16(in=outzy, out=notzy);
        And16(a=y, b=notzy, out=zyy);
        
        //nx
        Out16(in=nx, out=outnx);
        Not16(in=zxx, out=notzxx);
        Not16(in=outnx, out=notnx);
        And16(a=zxx, b=notnx, out=andzxx);
        And16(a=notzxx, b=outnx, out=andnx);
        Or16(a=andzxx, b=andnx, out=nxx);

        //ny
        Out16(in=ny, out=outny);
        Not16(in=zyy, out=notzyy);
        Not16(in=outny, out=notny);
        And16(a=zyy, b=notny, out=andzyy);
        And16(a=notzyy, b=outny, out=andny);
        Or16(a=andzyy, b=andny, out=nyy);

        // Xor(a=zxx, b=nx, out=nxx);
        // Xor(a=zyy, b=ny, out=nyy);

        //f
        Out16(in=f, out=outf);
        Not16(in=outf, out=notf);
        Add16(a=nxx, b=nyy, out=addout);
        And16(a=addout, b=outf, out=faddout);
        And16(a=nxx, b=nyy, out=andout);
        And16(a=andout, b=notf, out=fandout);
        Or16(a=fandout, b=faddout, out=fout);

        //no
        Out16(in=no, out=outno);
        Not16(in=fout, out=notfout);
        Not16(in=outno, out=notno);
        And16(a=fout, b=notno, out=andfout);
        And16(a=notfout, b=outno, out=andno);
        Or16(a=andfout, b=andno, out=out, out[0..7]=left, out[8..15]=right, out[15]=first);   

        //zr
        Or8Way(in=left, out=ng0);
        Or8Way(in=right, out=ng1);
        Or(a=ng0, b=ng1, out=zr0);
        Not(in=zr0, out=zr);

        //ng
        Or(a=first, b=false, out=ng);
}